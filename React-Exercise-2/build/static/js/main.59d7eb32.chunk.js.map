{"version":3,"sources":["components/Data.jsx","components/TableBody.jsx","components/TableHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Data","data","Delete","update","className","disabled","readOnly","value","data1","data2","type","onClick","id","TableBody","map","dt","TableHeader","inputData","handleChange","currentOperation","handleDataAdd","setUpdatedData","name","onChange","firstInput","placeholder","secondInput","colSpan","operation","icon","faPlus","faPencilAlt","App","useState","setData","setInputData","setCurrentOperation","event","target","preventDefault","input1","input2","uuidv4","index","findIndex","el","newData","filter","oldData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59d7eb32.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Data = ({ data, Delete, update }) => {\r\n  return (\r\n    <tr key={data.id} className=\"table-margin\">\r\n      <td>\r\n        <input\r\n          className=\"input-data\"\r\n          disabled\r\n          readOnly={true}\r\n          value={data.data1}\r\n        />\r\n      </td>\r\n      <td>\r\n        <input\r\n          className=\"input-data\"\r\n          disabled\r\n          readOnly={true}\r\n          value={data.data2}\r\n        />\r\n      </td>\r\n      <td>\r\n        <button\r\n          className=\"btn-succes\"\r\n          type=\"button\"\r\n          onClick={() => update(data.id)}\r\n        >\r\n          Edit\r\n        </button>\r\n      </td>\r\n      <td>\r\n        <button\r\n          className=\"btn-danger\"\r\n          onClick={() => Delete(data.id)}\r\n          type=\"button\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Data;\r\n","import React from \"react\";\r\nimport Data from \"./Data\";\r\n\r\nconst TableBody = ({ data, Delete, update }) => {\r\n  return (\r\n    <tbody>\r\n      {data.map((dt) => {\r\n        return <Data data={dt} Delete={Delete} update={update} />;\r\n      })}\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nconst TableHeader = ({\r\n  inputData,\r\n  handleChange,\r\n  currentOperation,\r\n  handleDataAdd,\r\n  setUpdatedData,\r\n}) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <td>\r\n          <input\r\n            className=\"input-data-add \"\r\n            name=\"firstInput\"\r\n            onChange={handleChange}\r\n            value={inputData.firstInput}\r\n            placeholder=\"First Name\"\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            className=\"input-data-add \"\r\n            name=\"secondInput\"\r\n            onChange={handleChange}\r\n            value={inputData.secondInput}\r\n            placeholder=\"Second Name\"\r\n          />\r\n        </td>\r\n        <td colSpan={2}>\r\n          {/* According to currentoperation state render add/update button */}\r\n          {currentOperation.operation === \"add\" && (\r\n            <button className=\"btn-add\" type=\"button\" onClick={handleDataAdd}>\r\n              <FontAwesomeIcon icon={faPlus} /> Add\r\n            </button>\r\n          )}\r\n          {currentOperation.operation === \"update\" && (\r\n            <button\r\n              className=\"btn-update\"\r\n              type=\"button\"\r\n              onClick={setUpdatedData}\r\n            >\r\n              <FontAwesomeIcon icon={faPencilAlt} />\r\n              Update\r\n            </button>\r\n          )}\r\n        </td>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./styles.scss\";\nimport TableBody from \"./components/TableBody\";\nimport TableHeader from \"./components/TableHeader\";\n\nfunction App() {\n  //State for main Data\n  const [data, setData] = useState([]);\n  //State for Inputs\n  const [inputData, setInputData] = useState({\n    firstInput: \"\",\n    secondInput: \"\",\n  });\n  //State for update/add button\n  const [currentOperation, setCurrentOperation] = useState({\n    operation: \"add\",\n  });\n\n  //Input onChange method\n  const handleChange = (event) => {\n    setInputData({ ...inputData, [event.target.name]: event.target.value });\n  };\n\n  //Method for adding data\n  const handleDataAdd = (event) => {\n    event.preventDefault();\n    const input1 = inputData.firstInput;\n    const input2 = inputData.secondInput;\n    //Add data only if both inputs have values\n    if (input1 && input2) {\n      setData([...data, { id: uuidv4(), data1: input1, data2: input2 }]);\n      setInputData({ firstInput: \"\", secondInput: \"\" });\n    }\n  };\n\n  //Method for deleteing data\n  const handleDelete = (id) => {\n    //if the data which is to be delete is in update mode then clear the data update inputs and then delete data\n    if (id === currentOperation.id) {\n      setCurrentOperation({ operation: \"add\" });\n      setInputData({ firstInput: \"\", secondInput: \"\" });\n    }\n    const newData = data.filter((dt) => dt.id !== id);\n    setData([...newData]);\n  };\n\n  //Method for changing into update mode\n  const handleUpdate = (id) => {\n    const oldData = data.filter((dt) => dt.id === id);\n    setInputData({\n      firstInput: oldData[0].data1,\n      secondInput: oldData[0].data2,\n    });\n    setCurrentOperation({ id, operation: \"update\" });\n  };\n\n  //Method for updating the data\n  const setUpdatedData = () => {\n    const input1 = inputData.firstInput;\n    const input2 = inputData.secondInput;\n    //Only update if the input have values\n    if (input1 && input2) {\n      const index = data.findIndex((el) => el.id === currentOperation.id);\n      let newData = [...data];\n      newData[index].data1 = input1;\n      newData[index].data2 = input2;\n      setData([...newData]);\n      setCurrentOperation({ operation: \"add\" });\n      setInputData({ firstInput: \"\", secondInput: \"\" });\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <form>\n        <table>\n          <TableHeader\n            inputData={inputData}\n            handleChange={handleChange}\n            currentOperation={currentOperation}\n            handleDataAdd={handleDataAdd}\n            setUpdatedData={setUpdatedData}\n          />\n          {/*TableBody has a Data component for all the data rows*/}\n          <TableBody data={data} Delete={handleDelete} update={handleUpdate} />\n        </table>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}