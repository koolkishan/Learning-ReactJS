{"version":3,"sources":["components/ComponentD.jsx","components/ValueContext.jsx","components/ComponentC.jsx","components/ComponentB.jsx","components/ComponentA.jsx","App.js","reportWebVitals.js","index.js"],"names":["ComponentD","ValueContext","React","createContext","ValueProvider","Provider","ValueConsumer","Consumer","ComponentC","increment","onClick","ComponentB","ComponentA","useState","value","setValue","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAMeA,MAJf,WACE,OAAO,8BCDHC,EAAeC,IAAMC,gBAEdC,EAAgBH,EAAaI,SAC7BC,EAAgBL,EAAaM,SCU3BC,MAXf,WACE,OACE,qCACE,cAACF,EAAD,UACG,SAACG,GAAD,OAAe,wBAAQC,QAASD,EAAjB,0BAElB,cAAC,EAAD,QCHSE,MAJf,WACE,OAAO,cAAC,EAAD,KCkBMC,MAlBf,WAAuB,IAAD,EACMC,mBAAS,GADf,mBACbC,EADa,KACNC,EADM,KAQpB,OACE,qCACE,6BAAKD,IACL,cAACV,EAAD,CAAeU,MARI,WAErBC,EADiBD,EAAQ,IAOvB,SACE,cAAC,EAAD,UCLOE,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3efbf397.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ComponentD() {\r\n  return <></>;\r\n}\r\n\r\nexport default ComponentD;\r\n","import React from \"react\";\r\n\r\nconst ValueContext = React.createContext();\r\n\r\nexport const ValueProvider = ValueContext.Provider;\r\nexport const ValueConsumer = ValueContext.Consumer;\r\n","import React from \"react\";\r\nimport ComponentD from \"./ComponentD\";\r\nimport { ValueConsumer } from \"./ValueContext\";\r\n\r\nfunction ComponentC() {\r\n  return (\r\n    <>\r\n      <ValueConsumer>\r\n        {(increment) => <button onClick={increment}>Increment</button>}\r\n      </ValueConsumer>\r\n      <ComponentD />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ComponentC;\r\n","import React from \"react\";\r\nimport ComponentC from \"./ComponentC\";\r\n\r\nfunction ComponentB() {\r\n  return <ComponentC />;\r\n}\r\n\r\nexport default ComponentB;\r\n","import React, { useState } from \"react\";\r\nimport ComponentB from \"./ComponentB\";\r\nimport { ValueProvider } from \"./ValueContext\";\r\n\r\nfunction ComponentA() {\r\n  const [value, setValue] = useState(0);\r\n\r\n  const hanleIncrement = () => {\r\n    const newValue = value + 1;\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>{value}</h1>\r\n      <ValueProvider value={hanleIncrement}>\r\n        <ComponentB />\r\n      </ValueProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ComponentA;\r\n","import \"./App.css\";\nimport ComponentA from \"./components/ComponentA\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ComponentA />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}